    for(label i=0; i<(nSpecies_ - 1); i++)
    {
        const volScalarField& c1i = c1[i];
        const volScalarField& c0i = c0[i];
        List<scalar>& c1i_flatFld = c1_flatFld_[i];
        List<scalar>& c0i_flatFld = c0_flatFld_[i];

        // Insert my internal values
        forAll(c1i, cellI)
        {        
            c1i_flatFld[cellI] = c1i[cellI];
            c0i_flatFld[cellI] = c0i[cellI];
        }
        // Insert my boundary values
        forAll(c1i.boundaryField(), patchI)
        {        
            const fvPatchScalarField& pc1i = c1i.boundaryField()[patchI];        
            const fvPatchScalarField& pc0i = c0i.boundaryField()[patchI];      
            label nCompact =
                pc1i.patch().start()
                -c1i.mesh().nInternalFaces()
                +c1i.mesh().nCells();

            forAll(pc1i, faceI)
            {           
                c1i_flatFld[nCompact] = pc1i[faceI];
                c0i_flatFld[nCompact] = pc0i[faceI];
                nCompact++;
            }
        }

        // Do all swapping    
        map.distribute(c1i_flatFld);
        map.distribute(c0i_flatFld);
    
        if(debug2_)
        {        
            Foam::plicFuncs::write_flatFld(c1i_flatFld, c1i);
            Foam::plicFuncs::write_flatFld(c0i_flatFld, c0i);
        }
    }    
