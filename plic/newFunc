void Foam::plic::c_rhoh_collectData
(
    const PtrList<volScalarField>& c1,
    const PtrList<volScalarField>& c0,
    const volScalarField& rhoh1,
    const volScalarField& rhoh0
)
{
    const mapDistribute& map = faceStencil().map();

    for(label i=0; i<(nSpecies_ - 1); i++)
    {
        const volScalarField& c1i = c1[i];
        const volScalarField& c0i = c0[i];
        List<scalar>& c1i_flatFld = c1_flatFld_[i];
        List<scalar>& c0i_flatFld = c0_flatFld_[i];

        // Insert my internal values
        forAll(c1i, cellI)
        {        
            c1i_flatFld[cellI] = c1i[cellI];
            c0i_flatFld[cellI] = c0i[cellI];
        }
        // Insert my boundary values
        forAll(c1i.boundaryField(), patchI)
        {        
            const fvPatchScalarField& pc1i = c1i.boundaryField()[patchI];        
            const fvPatchScalarField& pc0i = c0i.boundaryField()[patchI];      
            label nCompact =
                pc1i.patch().start()
                -c1i.mesh().nInternalFaces()
                +c1i.mesh().nCells();

            forAll(pc1i, faceI)
            {           
                c1i_flatFld[nCompact] = pc1i[faceI];
                c0i_flatFld[nCompact] = pc0i[faceI];
                nCompact++;
            }
        }

        // Do all swapping    
        map.distribute(c1i_flatFld);
        map.distribute(c0i_flatFld);
    
        if(debug2_)
        {        
            Foam::plicFuncs::write_flatFld(c1i_flatFld, c1i);
            Foam::plicFuncs::write_flatFld(c0i_flatFld, c0i);
        }
    }    

    // Insert my internal values
    forAll(h1, cellI)
    {        
        rhoh1_flatFld_[cellI] = rhoh1[cellI];
        rhoh0_flatFld_[cellI] = rhoh0[cellI];
    }
    // Insert my boundary values
    forAll(rhoh1.boundaryField(), patchI)
    {        
        const fvPatchScalarField& ph1 = rhoh1.boundaryField()[patchI];        
        const fvPatchScalarField& ph0 = rhoh0.boundaryField()[patchI];      
        label nCompact =
            ph1.patch().start()
            -rhoh1.mesh().nInternalFaces()
            +rhoh1.mesh().nCells();

        forAll(ph1, faceI)
        {           
            rhoh1_flatFld_[nCompact] = ph1[faceI];
            rhoh0_flatFld_[nCompact] = ph0[faceI];
            nCompact++;
        }
    }

    // Do all swapping    
    map.distribute(rhoh1_flatFld_);
    map.distribute(rhoh0_flatFld_);
    
    if(debug2_)
    {        
        Foam::plicFuncs::write_flatFld(rhoh1_flatFld_, rhoh1);
        Foam::plicFuncs::write_flatFld(rhoh0_flatFld_, rhoh0);
    }
}
